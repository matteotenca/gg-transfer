# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build

on:
  push:
    branches: [ "actions" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
#        python-version: ["3.12"]
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
    #- name: Set up Python ${{ matrix.python-version }}
    #  uses: actions/setup-python@v3
    #  with:
    #    python-version: ${{ matrix.python-version }}
    #- name: Install dependencies
    #  run: |
    #    python -m pip install --upgrade pip
    #    python -m pip install --upgrade wheel setuptools cython
    #    python -m pip install cibuildwheel==2.19.2

    - name: Build wheels
      #run: python -m cibuildwheel --output-dir wheelhouse
      uses: pypa/cibuildwheel@v2.19.2
        # to supply options, put them in 'env', like:
      env:
#        CIBW_BEFORE_ALL_LINUX: >
#          yum -y install portaudio-devel
#        CIBW_BEFORE_BUILD_LINUX: >
#          python -m pip install --upgrade wheel setuptools cython &&
#          GGWAVE_USE_CYTHON=True python -m pip install ggwave pyaudio
        #CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
        CIBW_ARCHS_WINDOWS: auto
        CIBW_ARCHS_LINUX: auto
        CIBW_SKIP: "cp*musl* cp*macos*"
        CIBW_BUILD: "cp*-many* cp*-win_amd64*"
      with:
        package-dir: .
        output-dir: wheelhouse
#    - name: Run Test
#      run: |
#        python -m pip install .
#        python -m unittest tests/test_send_msg.py
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
#    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
